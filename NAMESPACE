useDynLib(BALD, .registration = TRUE)
# exportPattern("^[[:alpha:]]+")

importFrom(stats, integrate)
import(logspline, lattice, methods, rjags, graphics)
exportMethods(exposureGrowth)
exportMethods(finalCumulativeDiff)
exportMethods(triResi)
exportMethods(QQPlot)
exportMethods(skewnessParameter)
importFrom(stats, integrate)
exportMethods(autoregressiveParameter)
exportMethods(calendarYearEffectAutoregressiveParameter)
exportMethods(exposureGrowthAutoregressiveParameter)
exportMethods(meanExposureGrowth)
exportMethods(degreesOfFreedom)
exportMethods(standardDeviationOfExposureGrowth)
exportMethods(standardDeviationOfCalendarYearEffect)
exportMethods(standardDeviationForScaleInnovation)
exportMethods(scaleParameter)
exportMethods(stochasticInflationRhoParameter)
exportMethods(stochasticInflationStationaryMean)
exportMethods(stochasticInflation)
exportMethods(calendarYearEffectErrors)
exportMethods(calendarYearEffect)
exportMethods(predictedPayments)
exportMethods(standardDeviationVsDevelopmentTime)
exportMethods(exposureGrowthTracePlot)
exportMethods(calendarYearEffectErrorTracePlot)
exportMethods(lossDevelopmentFactors)
exportMethods(rateOfDecayTracePlot)
exportMethods(consumptionPathTracePlot)
exportMethods(consumptionPath)
exportMethods(rateOfDecay)
exportMethods(tailFactor)
exportMethods(numberOfKnots)
exportMethods(mcmcACF)
export(accountForZeroPayments)
importFrom(stats, nlm)
exportMethods(probablityOfPayment)
exportMethods(gompertzParameters)
export(makeBreakAnnualInput)
exportMethods(firstYearInNewRegime)
exportMethods(firstYearInNewRegimeTracePlot)
exportMethods(runLossDevModel)
export(makeStandardAnnualInput)
export(cumulate)
export(decumulate)
import(methods)
import(rjags)
export(lossDevOptions)
importFrom("grDevices", "gray", "grey")
importFrom("stats", "acf", "dbeta", "dchisq",
 "dnorm", "dunif", "median", "na.omit", "pbeta",
 "pchisq", "quantile", "rbeta", "rgamma", "rnorm",
  "runif", "sd", "update")
